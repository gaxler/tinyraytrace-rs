initSidebarItems({"constant":[["CANVAS_WIDTH_HEIGHT",""],["DEFAULT_JITTER",""],["MAX_RAY_BOUNCES",""]],"fn":[["cast_ray","This is the light ray simulation. We go over the objects in the scene and check if our light ray intersect with them. If there is an intersection, we get the point of intersection and assign the color of the object the ray intersect with. Next we use the point of intersection and the lighting source in the scene to determine how lighting should affect the color at intersection point."],["get_light_adjustments",""],["jitter_along_normal","This function jitters a point along a noraml vector. Why do we need that? @ssloy explains: “Why is that? It’s just that our point lies on the surface of the object, and (except for the question of numerical errors) any ray from this point will intersect the object itself.”"],["light_is_shadowed","Shadow is like a negative light, we “cast a ray of shadow” for a certain hit point and light source. If the shadow ray hits the object, we know that the object is in shadow and we can’t see the light source. (Github Copilot wrote this line for me, how cool is that?)"],["main",""],["reflective_ray_cast","Our ray of lights don’t stay in the same spot. If the hit some reflective material, they bounce off it like a ball. The is a recursive process. We start with a ray of light and cast it through the scene. Every time a ray hits some object and bounces off, well that’s a new ray. In real life ( I guess ) this process can go on until light losses energy, here we put a hard limit on the number of bounces."],["render","This function builds an image by simulating light rays. Each pixel of an image is translated into a light ray. For each pixel, the light ray simulation returns the color the pixel should get."]],"mod":[["blocks","In our world we have Spheres, Light Sources, Light Rays ang Materials."],["vectors","We operate in a 3-D coordinate space. This is a helper struct for vector calculations."]],"struct":[["CollisionState",""],["LightBuilder",""],["SphereBuilder",""]],"type":[["SceneObject",""]]});